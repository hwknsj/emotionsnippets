{
  "Import ClassNames": {
    "prefix": "imecn",
    "body": ["import { ClassNames } from '@emotion/core';"],
    "description": "Import ClassNames from @emotion/core"
  },
  "Import { css }": {
    "prefix": "imecss",
    "body": ["import { css } from '@emotion/core';"],
    "description": "Import css from @emotion/core"
  },
  "Import jsx prop": {
    "prefix": "imej",
    "body": [
      "// below comment line is required",
      "// it tells babel how to convert properly",
      "/** @jsx jsx */",
      "import { jsx } from '@emotion/core';"
    ],
    "description": "Imports emotion jsx prop"
  },
  "Import jsx with css props": {
    "prefix": "imejcss",
    "body": [
      "// below comment line is required",
      "// it tells babel how to convert properly",
      "/** @jsx jsx */",
      "import { jsx, css } from '@emotion/core'"
    ],
    "description": "Imports emotion jsx and css props"
  },
  "Import styled from emotion": {
    "prefix": "imesc",
    "body": ["import styled from '@emotion/styled';"],
    "description": "Import styled from emotion"
  },
  "Import { useTheme }": {
    "prefix": "imeusthm",
    "body": ["import { useTheme } from 'emotion-theming';"],
    "description": "Import useTheme emotion-theming"
  },
  "ClassNames HOC": {
    "prefix": "ecn",
    "body": [
      "<ClassNames>",
      "\t{({ cx, css }) => ($1)}",
      "</ClassNames>"
    ],
    "description": "Creates ClassNames HOC with render props"
  },
  "css style constant": {
    "prefix": "ecss",
    "body": [
      "const style$0 = css`",
      "\t$1",
      "`"
    ],
    "description": "Declared an emotion css style variable"
  },
  "css styles object definition": {
    "prefix": "eobjcss",
    "body": [
      "const objectStyles$0 = css({",
      "\t$1",
      "})"
    ],
    "description": "Declared an emotion css style variable with object styles"
  },
  "theme variable with useTheme": {
    "prefix": "eusthm",
    "body": "const theme = useTheme();",
    "description": "Declare them with useTheme() from emotion"
  },
  "styled component constant": {
    "prefix": "sc",
    "body": [
      "const Styled${1:${TM_FILENAME_BASE}} = styled.div`",
      "\t$1",
      "`"
    ],
    "description": "Declare styled component"
  },
  "Wrapped custom component in a styled component": {
    "prefix": "scw",
    "body": [
      "const Styled${1:${TM_FILENAME_BASE}} = styled($1)`",
      "\t;",
      "`"
    ],
    "description": "Wrap custom component with emotion styled component"
  }
}
